
### uri -------------------------------------------------------------------------------
uri = "mongodb+srv://{username}:{password}@cluster0.l7fdbmf.mongodb.net/mit261"

### helpers ---------------------------------------------------------------------------
link to helpers: https://drive.google.com/drive/folders/1ur1fB7jEjsAgV_Kib-rm1Gq_0VLxANfh?usp=sharing

//para sa login page nyo, use the verify password helper under data_helper.py
example:

import streamlit as st
from data_helper import get_user, verify_password
from pymongo.errors import PyMongoError, ServerSelectionTimeoutError

def login_view():
    """
    Displays the login form and handles user authentication with error handling.
    """
    st.title("Login")

    username = st.text_input("Username")
    password = st.text_input("Password", type="password")

    if st.button("Login"):
        if not username or not password:
            st.error("Please enter both username and password.")
            return

        try:
            user = get_user(username)  # This may raise a PyMongoError if DB is down

            if user and verify_password(password, user["passwordHash"]):
                st.session_state["logged_in"] = True
                st.session_state["user_role"] = user["role"]
                st.session_state["username"] = user["username"]
                st.success("Logged in successfully!")
                st.rerun()
            else:
                st.error("Invalid username or password.")

        except ServerSelectionTimeoutError as e:
            st.error("Cannot connect to the database. Please try again later.")
            # st.exception(e)
        except PyMongoError as e:
            st.error("A database error occurred. Please contact support.")
            st.exception(e)
        except Exception as e:
            st.error("An unexpected error occurred.")
            st.exception(e)



### current collection with sample data (default from maam brenda)---------------------
collection: grades | sample data:  {'_id': 1, 'StudentID': 1, 'SubjectCodes': ['IT304'], 'Grades': [79], 'Teachers': ['Prof. Henry Dologuin'], 'SemesterID': 1}
collection: semesters | sample data:  {'_id': 1, 'Semester': 'FirstSem', 'SchoolYear': 2020}
collection: students | sample data:  {'_id': 1, 'Name': 'Lejeune, Niel Alfred F.', 'Course': 'Information Technology', 'YearLevel': 1}
collection: subjects | sample data:  {'_id': 'IT101', 'Description': 'Introduction to Information Technology', 'Units': 3, 'Teacher': 'Prof. Jeorge Ortega'}

### additional collections ------------------------------------------------------------
# prospectus collection
{
  "_id": 1,
  "studentId": 1,                      // reference to student._id
  "programCode": "BSBA",               // reference to curriculum.programCode
  "curriculumYear": "2025-2026",       // reference to curriculum.curriculumYear
  "subjects": [
    {
      "code": "GS01",
      "name": "General Science 1",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "semester": "First", #First/Second/Summer
      "preRequisites": [1, 2, 3, 4, 5],
      "status": "PASSED",              // INC | FAILED | PASSED
      "grade": 2.00
    }
  ]
}

# faculty (who teaches)
{
  "_id": 1,
  "facultyName": "Prof. Juan Cruz",
  "sex": "Male",
  "department": "Business Administration",
  "email": "jcruz@example.com"
}

# semester (To track which academic term the student is enrolled.)
{
  "_id": 1,
  "schoolYear": "2025-2026",
  "term": "1st Semester",
  "startDate": "2025-08-01",
  "endDate": "2025-12-15",
  "enrollmentStart": "2025-07-01",
  "enrollmentEnd": "2025-07-20",
  "status": "OPEN"   // "OPEN", "CLOSED", "ONGOING", "COMPLETED"
}

classSchedule (When a subject is offered, who teaches, and where.)
{
  "_id": 1,
  "subjectId": 1,                 // references subjects._id
  "facultyId": 1,                 // references faculty._id
  "semesterId": 1,                // references semester._id
  "section": "BSBA-1A",
  "schedule": [
    { "day": "Mon", "time": "08:00-10:00", "room": "101" },
    { "day": "Wed", "time": "08:00-10:00", "room": "101" }
  ]
}

# enrollments (Tracks which student enrolled in which subject offering.)
{
  "_id": 1,
  "studentId": 1,
  "classOfferingId": 1,
  "status": "Enrolled",   // Enrolled | Dropped | Completed
  "grade": null
}

#userAccounts (If the system will have login (student portal, registrar, faculty).)
{
  "_id": 1,
  "username": "student1",
  "passwordHash": "hashedpw", #user 
  "role": "student",    // student | faculty | registrar | admin
  "linkedId": 1         // points to student._id or faculty._id
}



