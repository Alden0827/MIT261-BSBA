
# ===============================
# AGGREGATION FUNCTIONS (with cache)
# ===============================
def get_student_count_by_course():
    def query():
        db = client["mit261"]
        collection = db["students"]
        pipeline = [
            {"$group": {"_id": "$Course", "TotalStudents": {"$sum": 1}}},
            {"$sort": {"TotalStudents": -1}}
        ]
        return pd.DataFrame(list(collection.aggregate(pipeline)))

    return load_or_query("agg_student_count_by_course.pkl", query)


def get_average_grade_per_subject():
    def query():
        db = client["mit261"]
        collection = db["grades"]
        pipeline = [
            {"$unwind": "$Grades"},
            {"$unwind": "$SubjectCodes"},
            {"$group": {"_id": "$SubjectCodes", "AverageGrade": {"$avg": "$Grades"}}},
            {"$sort": {"AverageGrade": 1}}
        ]
        return pd.DataFrame(list(collection.aggregate(pipeline)))

    return load_or_query("agg_average_grade_per_subject.pkl", query)


def get_average_grade_per_student():
    def query():
        db = client["mit261"]
        collection = db["grades"]
        pipeline = [
            {"$unwind": "$Grades"},
            {"$group": {"_id": "$StudentID", "AverageGrade": {"$avg": "$Grades"}}},
            {"$sort": {"AverageGrade": -1}}
        ]
        return pd.DataFrame(list(collection.aggregate(pipeline)))

    return load_or_query("agg_average_grade_per_student.pkl", query)


def get_subject_load_per_teacher():
    def query():
        db = client["mit261"]
        collection = db["subjects"]
        pipeline = [
            {"$group": {"_id": "$Teacher", "TotalSubjects": {"$sum": 1}}},
            {"$sort": {"TotalSubjects": -1}}
        ]
        return pd.DataFrame(list(collection.aggregate(pipeline)))

    return load_or_query("agg_subject_load_per_teacher.pkl", query)