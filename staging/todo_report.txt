I want you to revise this report page
add markdowns to displays incites and elaborates it.
----------------------------------------------

Todo (new report page):

1. Student Academic Stand Report

   A. Dean's List (Top 10 Students)
      Criteria: No grade < 85% & GPA >=90%
      TABLE Columns [#, ID, Name, Prog, Yr, GPA, Units, High]
   
   B. Academic Probation (10 Students)   
      Criteria: No grade < 75 OR >=30% FAILS
      TABLE Columns [#, ID, Name, Prog, Yr, GPA, Units, High, LOW]

   Insight: Enables quick identification of high achievers, students needing support, and overall academic distribution. 

2. Subject Pass/Failed Distribution

   Columns [Subject Code, Subject Name, Semester, Pass Count, Fail Count, Pass %, Fail %]
   MATH101	Calculus I	Spring 2025	120	30	80%	20%
   BIO201	Cell Biology	Spring 2025	90	10	90%	10%

   Insight: Clear visibility into subject-level performance by term‚Äîsupports targeted interventions. 

3. Enrollment trend An analysis
   Columns [Semester, Total Entrollment, New Enrollees ,Dropouts, Retention Rates (%)]
   Semester	Total Enrollment	New Enrollees	Dropouts	Retention Rate (%)
   Fall 2023	2000	500	100	95%
   Spring 2024	1950	300	150	92%
   Fall 2024	2100	600	50	97%

4. Incomplete Grades Report
Student ID	Name	Course Code	Course Title	Term	Grade Status
S005	Alice Reyes	ENG301	Advanced English	Spring 2025	INC
S010	Mark Lee	HIST210	Modern History	Spring 2025	Dropped
‚Ä¶	‚Ä¶	‚Ä¶	‚Ä¶	‚Ä¶	‚Ä¶
Insight: Helps Registrar‚Äôs Office identify and follow up with students and instructors regarding incomplete or missing grade submissions.

5. Retention and Dropout Rates
	Semester to Semester	Retained	Dropped Out	Retention Rate (%)
	Fall 2023 ‚Üí Spring 2024	450	50	90%
	Fall 2022 ‚Üí Spring 2023	430	70	86%
	‚Ä¶	‚Ä¶	‚Ä¶	‚Ä¶
Insight: Measures student persistence and identifies retention issues early‚Äîcritical for institutional planning.


6. Top Performers per Program
Program	Semester	Student ID	Student Name	GPA	Rank
Computer Science	Spring 2025	S025	Maria Cruz	99	1
Biology	Spring 2025	S038	Ahmed Khan	99	1


7. curriculum progress viewer
   Columns [Subject Code, Subject Description, Lac Hours, Lab Hours, Units, Prerequisites]
















------------------------------------------
old report page:

# import streamlit as st
import matplotlib.pyplot as plt
import matplotlib.ticker as mtick
from streamlit_echarts import st_echarts, JsCode
import pandas as pd
# import report_helper as r
import helpers.report_helper as r
# from helpers.report_helper import db
from helpers.report_helper import get_Schoolyear_options, get_course_options

def report_page(st, db):
	# ------------------------------
	# Streamlit App
	# ------------------------------
	st.set_page_config(page_title=" Analytics Reports", layout="wide")
	st.title("üìä Analytics & Visualization")

	report = st.selectbox(
	    "Select a Report",
	    [
	        "-- Select Report --",
	        # C. Course and Curriculum Insights
	        "Grade Trend per Course",
	        "Subject Load Intensity",
	        "GE vs Major Subjects Performance",

	    ]
	)


	# ------------------------------
	# Report Logic
	# ------------------------------
	if report == "-- Select Report --":
	    st.markdown("""
	        ## C. Course and Curriculum Insights

	        The **Reporting Module** provides a deep dive into curriculum structures, subject intensity, 
	        and comparative performance between General Education and Major subjects.

	        ---

	        ## üìë Reports Available

	        ### 1. üìà Grade Trend per Course
	        - **Purpose:** Track how grades evolve per course across different school years.
	        - **Metrics:** Course, School Year, Average Grade.
	        - **Use Case:** Spot long-term performance patterns to guide academic program adjustments.

	        ### 2. üìä Subject Load Intensity
	        - **Purpose:** Analyze the number of subjects students typically take per course.
	        - **Metrics:** Course, Average Subject Load per Semester.
	        - **Use Case:** Identify programs with heavier workloads to balance student academic demands.

	        ### 3. üéì GE vs Major Subjects Performance
	        - **Purpose:** Compare student outcomes in General Education vs Major subjects.
	        - **Metrics:** School Year, GE Average, Major Average, Performance Gap.
	        - **Use Case:** Detect whether students struggle more in GE or Major subjects, guiding targeted interventions.

	        ---

	        ## ‚öôÔ∏è Features
	        - **Filters:** Course, Semester, School Year, Teacher, Student.
	        - **Visualization:** Heatmaps, bar charts, and comparative graphs.
	        - **Export Options:** CSV, Excel, PDF.
	        - **Drill-Down:** Explore subject- or course-specific details.
	        - **Insights:** Understand curriculum demands, balance workloads, and improve subject-specific performance.
	    """)


	elif report == "Grade Trend per Course":
	    df = r.get_grade_trend_per_course()
	    st.subheader("üìä Grade Trends per Course (Heatmap)")

	    if not df.empty:
	        # Prepare axes
	        courses = df['Course'].unique().tolist()
	        years = sorted(df['SchoolYear'].unique().tolist())

	        # Create heatmap data: [x_index, y_index, value]
	        heatmap_data = [
	            [years.index(row['SchoolYear']), courses.index(row['Course']), round(row['Average'], 2)]
	            for _, row in df.iterrows()
	        ]

	        # Determine min and max for visualMap
	        val_min = df['Average'].min()
	        val_max = df['Average'].max()

	        options = {
	            "title": {"text": "Grade Trends per Course", "left": "center"},
	            "tooltip": {
	                "position": "top",
	                "formatter": """
	                    function (params) {
	                        let year = params.series.xAxis.data[params.data[0]];
	                        let course = params.series.yAxis.data[params.data[1]];
	                        let value = params.data[2];
	                        return '<b>Course:</b> ' + course + '<br>' +
	                               '<b>Year:</b> ' + year + '<br>' +
	                               '<b>Average Grade:</b> ' + value;
	                    }
	                """
	            },
	            "grid": {"height": "70%", "top": "10%"},
	            "xAxis": {"type": "category", "data": years, "name": "School Year"},
	            "yAxis": {"type": "category", "data": courses, "name": "Course"},
	            "visualMap": {
	                "min": val_min,
	                "max": val_max,
	                "calculable": True,
	                "orient": "horizontal",
	                "left": "center",
	                "bottom": 10,
	                "inRange": {"color": ["#d73027", "#fee090", "#1a9850"]}  # red ‚Üí yellow ‚Üí green
	            },
	            "series": [{
	                "name": "Average Grade",
	                "type": "heatmap",
	                "data": heatmap_data,
	                "label": {"show": True},
	                "emphasis": {"itemStyle": {"shadowBlur": 10, "shadowColor": "rgba(0,0,0,0.5)"}}
	            }]
	        }
	        
	        st.markdown('''
	        This heatmap visualizes the trend of average grades per course across different school years. 
	        Each row represents a course, and each column represents a school year. 
	        The color intensity indicates the average grade, with red showing lower averages, yellow for moderate performance, 
	        and green for higher averages. This allows educators and administrators to quickly identify courses where 
	        students are consistently performing well or struggling over time, helping guide curriculum adjustments and 
	        targeted interventions.
	        ''')

	        st_echarts(options=options, height="600px")
	    else:
	        st.info("No grade data found for the selected filters.")


	elif report == "Subject Load Intensity":
	    # --- Fetch data ---
	    df = r.get_subject_load_intensity()  # Expected columns: ["Course", "Load"]
	    
	    st.subheader("üìä Subject Load Intensity per Course")
	    st.markdown('''
	    The table displays the average subject load per course, showing how intensive the curriculum is for students in each program. 
	    Higher load values indicate more intensive coursework.
	    ''')
	    st.dataframe(df)

	    if not df.empty:
	        # Prepare chart data
	        courses = df["Course"].tolist()
	        loads = df["Load"].round(2).tolist()

	        # Define color based on load intensity
	        def get_color(value):
	            if value >= 5:
	                return "#d9534f"  # Red ‚Üí Very heavy load
	            elif value >= 4:
	                return "#f0ad4e"  # Orange ‚Üí Moderate load
	            else:
	                return "#5cb85c"  # Green ‚Üí Light load

	        colors = [get_color(v) for v in loads]

	        # --- ECharts options ---
	        options = {
	            "title": {"text": "Average Subject Load per Course", "left": "center"},
	            "tooltip": {"trigger": "axis", "formatter": "{b}: {c}"},
	            "xAxis": {"type": "category", "data": courses, "name": "Course", "axisLabel": {"rotate": 30}},
	            "yAxis": {"type": "value", "name": "Load"},
	            "series": [{
	                "data": [{"value": v, "itemStyle": {"color": c}} for v, c in zip(loads, colors)],
	                "type": "bar",
	                "label": {"show": True, "position": "top"}
	            }]
	        }

	        st.markdown('''
	        The column chart visualizes the subject load intensity for each course. Bars are color-coded:
	        green represents lighter course loads, orange indicates moderate intensity, and red highlights heavier workloads.
	        This chart allows administrators and educators to quickly identify which courses have heavier academic demands.
	        ''')
	        st_echarts(options=options, height="500px")
	    else:
	        st.info("No course load data found.")


	elif report == "GE vs Major Subjects Performance":
	    df = r.get_ge_vs_major()

	    st.subheader("üìä General Education vs Major Subjects Performance Over Time")
	    st.markdown(
	        """
	        This chart compares the **average performance of students** in 
	        **General Education (GE)** subjects and **Major** subjects 
	        across different school years.  
	        
	        It helps identify performance trends and differences between subject types.
	        """
	    )
	    st.dataframe(df)

	    years = sorted(df["SchoolYear"].unique().tolist())
	    ge_vals = df[df["Type"] == "GE"].sort_values("SchoolYear")["Average"].tolist()
	    major_vals = df[df["Type"] == "Major"].sort_values("SchoolYear")["Average"].tolist()

	    # Compute dynamic min/max with margins
	    ymin = df["Average"].min()
	    ymax = df["Average"].max()
	    margin = 1  # adjust margin as needed

	    option = {
	        "tooltip": {"trigger": "axis"},
	        "legend": {"data": ["GE", "Major"]},
	        "xAxis": {
	            "type": "category",
	            "data": years,
	            "name": "School Year"
	        },
	        "yAxis": {
	            "type": "value",
	            "name": "Average Grade",
	            "min": float(ymin - margin),
	            "max": float(ymax + margin),
	        },
	        "series": [
	            {
	                "name": "GE",
	                "type": "bar",
	                "data": ge_vals,
	                "barGap": 0,
	                "label": {
	                    "show": True,
	                    "position": "top",
	                    "formatter": "{c:.2f}"  # ‚úÖ Correct property
	                }
	            },
	            {
	                "name": "Major",
	                "type": "bar",
	                "data": major_vals,
	                "label": {
	                    "show": True,
	                    "position": "top",
	                    "formatter": "{c:.2f}"  # ‚úÖ Correct property
	                }
	            },
	        ],
	    }

	    st_echarts(options=option, height="500px")
---------------------------------




# data_structure with sample data
uri = "mongodb+srv://aldenroxy:N53wxkFIvbAJjZjc@cluster0.l7fdbmf.mongodb.net/mit261"

#userAccounts #collection
{
  "_id": {
    "$oid": "68b664688519ad27d3877a86"
  },
  "username": "registrar",
  "role": "registrar",
  "linkedId": null,
  "passwordHash": {
    "$binary": {
      "base64": "JDJiJDEyJEpGWmRNUkR1cGJScExhVUI2czBpRnVlaC5IMC9LZ0pJUzJzYkNrN0NWWkU0WUxqckQ1bG9L",
      "subType": "00"
    }
  },
  "fullName": "",
  "UID": 0
}

subjects #collection
{
  "_id": "IT101",
  "Description": "Introduction to Information Technology",
  "Units": 3,
  "Teacher": "Prof. Jeorge Ortega"
}

students #collection
{
  "_id": 1,
  "Name": "Lejeune, Niel Alfred F.",
  "Course": "Information Technology",
  "YearLevel": 1
}

semesters #collection
{
  "_id": 1,
  "Semester": "FirstSem",
  "SchoolYear": 2020
}

grades #collection
{
  "_id": 6,
  "StudentID": 1,   #linkage to sutdents._id collection
  "SubjectCodes": [
    "GE040",
    "IT405",
    "EE105",
    "GE008",
    "EE302"
  ],
  "Grades": [
    78,
    82,
    93,
    0,
    0
  ],
  "Teachers": [
    "Prof. Brendalyn Samillano",
    "Prof. Jake Ligoan",
    "Prof. Michelle Velasco",
    "Prof. Mico Dela Rosa",
    "Prof. Sandra Reyes"
  ],
  "SemesterID": 6,
  "Status":['','','','Dropped','INC']
}

curriculum #collection
{
  "_id": {
    "$oid": "68b6a4a4b4ad4b9a7a79e496"
  },
  "programCode": "BSBA",
  "programName": "BACHELOR OF SCIENCE IN BUSINESS ADMINISTRATION",
  "curriculumYear": "2025-2026",
  "subjects": [
    {
      "year": 1,
      "semester": "First",
      "code": "GE 200",
      "name": "Understanding the Sell",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "GE 203",
      "name": "Life and Works of Rizal",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "GE 204",
      "name": "Gender and Society",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "GE 201",
      "name": "Reading in Philippine History",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "GE 303",
      "name": "Philippine Popular Culture",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "BACC 1",
      "name": "Basic Microeconomics",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "PE 1",
      "name": "Physical Activities Towards Health and Fitness 1 - Movement Competency Training",
      "lec": 2,
      "lab": 0,
      "unit": 2,
      "preRequisites": []
    },
    {
      "year": 1,
      "semester": "First",
      "code": "NSTP 1",
      "name": "Civic Welfare Training Services 1",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1, #1-4
      "semester": "Second", #First/Second
      "code": "GE 402",
      "name": "Mathematics in the Modern World",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": []
    },
    {
      "year": 1, #1-4
      "semester": "Second",
      "code": "NSTP 2",
      "name": "Civic Welfare Training Services 2",
      "lec": 3,
      "lab": 0,
      "unit": 3,
      "preRequisites": [
        "NSTP 1"
      ]
    }
  ]
}
