can you refactor and design the enrollment_manager.py
use the registration_helper.py

registrar should be able to do the ff:
    # 1. Add a pending enrollment
    print("\n‚û°Ô∏è Adding Pending Enrollment...")
    pending_id = add_pending_enrollee(
        student_id=test_student_id,
        semester_id=test_semester_id,
        subject_codes=test_subjects,
        registered_by_user=registrar_user
    )

    # 2. Fetch pending enrollees
    print("\n‚û°Ô∏è Fetching Pending Enrollees...")
    df_pending = get_pending_enrollees(semester_id=test_semester_id)
    print(df_pending)

    # # 3. Approve pending enrollment
    pending_id = ObjectId("68ca2102b184ab6d79c7f3cc")
    if pending_id:
        print("\n‚û°Ô∏è Approving Enrollment...")
        approved_id = approve_enrollee(
            student_id=test_student_id,
            semester_id=test_semester_id,
            subject_codes=test_subjects,
            approved_by_user=approver_user
        )
        print(f"‚úÖ Enrollment Approved with ID {approved_id}")

    # # 4. Update enrollment (add/drop subjects)
    print("\n‚û°Ô∏è Updating Enrollment (Add one, Drop one)...")
    update_result = update_enrollment(
        student_id=test_student_id,
        semester_id=test_semester_id,
        add_subjects=["GE 403"],   # Add another subject
        drop_subjects=["GE 402"],  # Drop one subject
        updated_by_user=approver_user
    )
    print("Update Success:", update_result)

    # # 5. Fetch enrolled students
    print("\n‚û°Ô∏è Fetching Enrolled Students...")
    df_enrolled = get_enrolled_students(course="BSBA", semester_id=test_semester_id)
    print(df_enrolled)

    # # 6. Discard a pending enrollment (simulate another request)
    print("\n‚û°Ô∏è Discarding Pending Enrollment...")
    discard_result = discard_pending_enrollee(
        student_id=test_student_id,
        semester_id=test_semester_id,
        discarded_by_user=registrar_user,
        reason="Incomplete requirements"
    )
    print("Discard Success:", discard_result)

    # # 7. Fetch discarded enrollees
    print("\n‚û°Ô∏è Fetching Discarded Enrollees...")
    df_discarded = get_discarded_enrollees(semester_id=test_semester_id)
    print(df_discarded)


#------------------------------------------------------
import streamlit as st
import pandas as pd
import sys
import os

sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))

import helpers.data_helper as dh


from helpers.registration_helper import find_best_match
    
# ---------------------------
# Main Enrollment Manager Page
# ---------------------------
def enrollment_manager_page(db):
    r = dh.data_helper({"db": db})
    st.title("Enrollment Manager")

    with st.spinner("Loading school years...", show_time=True):
        school_years = r.get_school_years()
    with st.spinner("Loading semesters...", show_time=True):
        semester_names = r.get_semester_names()
    with st.spinner("Loading Courses...", show_time=True):
        courses = r.get_courses()

    # Initialize session state variables
    if "confirm_enrollment" not in st.session_state:
        st.session_state.confirm_enrollment = False
    if "selected_student" not in st.session_state:
        st.session_state.selected_student = None
    if "selected_subjects_to_enroll" not in st.session_state:
        st.session_state.selected_subjects_to_enroll = []
    if "search_results" not in st.session_state:
        st.session_state.search_results = []
    if "selected_student_id" not in st.session_state:
        st.session_state.selected_student_id = None

    # Dropdowns for filters
    col1, col2, col3 = st.columns(3)
    with col1:
        selected_school_year = st.selectbox("School Year", school_years)
    with col2:
        selected_semester = st.selectbox("Semester", semester_names)
    with col3:
        selected_course = st.selectbox("Course", courses)

    # Student Search
    st.subheader("üîç Student Search")
    search_query = st.text_input("Enter student name")

    if st.button("Search"):
        st.session_state.confirm_enrollment = False
        st.session_state.selected_student = None
        st.session_state.selected_student_id = None

        if search_query.strip():
            students_col = db["students"]
            # matches = find_best_match(search_query, students_col)
            # matches = find_best_match(search_query, course=selected_course, collection=students_col)
            matches = find_best_match(query=search_query, course=selected_course, collection=students_col)


            if matches:
                st.session_state.search_results = matches
            else:
                st.session_state.search_results = []
                st.warning("No student found.")
        else:
            st.warning("Please enter a name to search.")

    # Show search results if available
    if st.session_state.search_results:
        options = {m["_id"]: m["Name"] for m in st.session_state.search_results}
        selected_id = st.selectbox(
            "Select Student",
            list(options.keys()),
            index=list(options.keys()).index(st.session_state.selected_student_id)
            if st.session_state.selected_student_id in options
            else 0,
            format_func=lambda x: options[x],
            key="student_selector"
        )

        if selected_id != st.session_state.selected_student_id:
            st.session_state.selected_student_id = selected_id
            st.session_state.selected_student = db["students"].find_one({"_id": selected_id})

    # Display Student Info
    student = st.session_state.selected_student
    if student:
        st.subheader("üë©‚Äçüéì Student Information")
        st.write(f"**Name:** {student.get('Name', 'N/A')}")
        st.write(f"**Course:** {student.get('Course', 'N/A')}")
        st.write(f"**Year Level:** {student.get('YearLevel', 'N/A')}")

        # Get Curriculum & Grades
        curriculum_df = r.get_curriculum(student.get("Course"))
        student_grades_df = r.get_student_subjects_grades(student.get("_id"))
        print('selected_semester:',selected_semester)
        print("Curriculum columns:", curriculum_df.columns.tolist())
        print("Student grades columns:", student_grades_df.columns.tolist())
        if not curriculum_df.empty:
            # ---------------------------
            # Passed subjects (>= 75)
            # ---------------------------
            passed_subjects = []
            if not student_grades_df.empty:
                passed_subjects = student_grades_df[student_grades_df["Grade"] >= 75][
                    "Subject Code"
                ].tolist()

            # Filter curriculum for semester & year level
            # print('curriculum_df:',curriculum_df.head(1))
            # potential_subjects = curriculum_df[
            #     (curriculum_df["semester"] == selected_semester.replace('Sem',''))
            #     & (curriculum_df["year"] == student.get("YearLevel"))
            #     & (~curriculum_df["Subject Code"].isin(student_grades_df["Subject Code"].tolist()))
            # ].copy()

            # normalize col names (good practice)
            curriculum_df.columns = curriculum_df.columns.str.strip()

            # handle if student_grades_df is empty
            if not student_grades_df.empty and "Subject Code" in student_grades_df.columns:
                taken_subjects = student_grades_df["Subject Code"].tolist()
            else:
                taken_subjects = []

            potential_subjects = curriculum_df[
                (curriculum_df["semester"].str.lower() == selected_semester.replace("Sem", "").lower())
                & (curriculum_df["year"] == student.get("YearLevel"))
                & (~curriculum_df["Subject Code"].isin(taken_subjects))
            ].copy()

            available_subjects, blocked_subjects = [], []
            for _, row in potential_subjects.iterrows():
                prerequisites = row.get("preRequisites", [])
                if not prerequisites or all(prereq in passed_subjects for prereq in prerequisites):
                    available_subjects.append(row)
                else:
                    blocked_subjects.append(row)

            available_subjects_df = pd.DataFrame(available_subjects)
            blocked_subjects_df = pd.DataFrame(blocked_subjects)

            # ‚úÖ Available Subjects
            st.subheader("‚úÖ Available Subjects")
            if not available_subjects_df.empty:
                st.dataframe(available_subjects_df[["Subject Code", "Description", "unit"]])

                selected_subjects = st.multiselect(
                    "Select subjects to enroll",
                    options=available_subjects_df["Subject Code"].tolist(),
                    format_func=lambda x: f"{x} - {available_subjects_df.loc[available_subjects_df['Subject Code'] == x, 'Description'].iloc[0]}",
                )

                # üîπ Define the confirmation dialog
                @st.dialog("Confirm Enrollment")
                def confirm_enrollment_dialog():
                    st.write("‚ö†Ô∏è Please review your enrollment before confirming:")

                    # --- Available Subjects Table ---
                    if selected_subjects:
                        available_confirmation_df = pd.DataFrame({
                            "Subject Code": selected_subjects,
                            "Description": [
                                available_subjects_df.loc[
                                    available_subjects_df["Subject Code"] == s, "Description"
                                ].iloc[0] for s in selected_subjects
                            ],
                            "Units": [
                                available_subjects_df.loc[
                                    available_subjects_df["Subject Code"] == s, "unit"
                                ].iloc[0] for s in selected_subjects
                            ],
                            "Prerequisites": [
                                available_subjects_df.loc[
                                    available_subjects_df["Subject Code"] == s, "preRequisites"
                                ].iloc[0] for s in selected_subjects
                            ]
                        })

                        # Apply styling for prerequisites
                        def style_prerequisites(prereq_list):
                            if not prereq_list:
                                return ""
                            styled = []
                            for prereq in prereq_list:
                                if prereq in passed_subjects:
                                    styled.append(f"‚úÖ {prereq}")
                                else:
                                    styled.append(f"‚ùå {prereq}")
                            return ", ".join(styled)

                        available_confirmation_df["Prerequisites"] = available_confirmation_df["Prerequisites"].apply(style_prerequisites)
                        st.subheader("‚úÖ Selected Subjects")
                        st.dataframe(available_confirmation_df.style.set_properties(**{'text-align': 'left'}))

                        # Total units
                        total_units = available_confirmation_df["Units"].sum()
                        st.write(f"**Total Units:** {total_units}")

                    # --- Blocked Subjects Table ---
                    if not blocked_subjects_df.empty:
                        blocked_confirmation_df = pd.DataFrame({
                            "Subject Code": blocked_subjects_df["Subject Code"],
                            "Description": blocked_subjects_df["Description"],
                            "Units": blocked_subjects_df["unit"],
                            "Prerequisites": blocked_subjects_df["preRequisites"]
                        })
                        blocked_confirmation_df["Prerequisites"] = blocked_confirmation_df["Prerequisites"].apply(style_prerequisites)
                        st.subheader("‚õî Blocked Subjects")
                        st.dataframe(blocked_confirmation_df.style.set_properties(**{'text-align': 'left'}))

                    # --- Confirm / Cancel Buttons ---
                    col1, col2 = st.columns(2)
                    with col1:
                        if st.button("‚úÖ Yes, Confirm"):
                            semester_doc = db.semesters.find_one(
                                {"SchoolYear": selected_school_year, "Semester": selected_semester}
                            )
                            if semester_doc:
                                semester_id = semester_doc["_id"]
                                new_grades_entry = {
                                    "StudentID": student["_id"],
                                    "SemesterID": semester_id,
                                    "SubjectCodes": selected_subjects,
                                    "Grades": [-1] * len(selected_subjects),
                                    "Teachers": ["Not Set"] * len(selected_subjects),
                                }
                                db.grades.insert_one(new_grades_entry)
                                st.success("üéâ Enrollment finalized successfully!")
                                # Reset session state
                                st.session_state.selected_student = None
                                st.session_state.selected_student_id = None
                                st.session_state.confirm_enrollment = False
                                st.session_state.selected_subjects_to_enroll = []
                                st.session_state.search_results = []
                                st.rerun()
                            else:
                                st.error("Semester not found. Please check school year/semester.")
                    with col2:
                        if st.button("‚ùå Cancel"):
                            st.session_state.confirm_enrollment = False
                            st.info("Enrollment cancelled.")

                # üîπ Show dialog when Finalize Enrollment is clicked
                if st.button("Finalize Enrollment"):
                    if selected_subjects:
                        st.session_state.confirm_enrollment = True
                        st.session_state.selected_subjects_to_enroll = selected_subjects
                        confirm_enrollment_dialog()
            else:
                st.info("No subjects available for enrollment.")

            # ‚õî Blocked Subjects
            st.subheader("‚õî Blocked Subjects")
            if not blocked_subjects_df.empty:
                print('blocked_subjects_df:',blocked_subjects_df)
                st.dataframe(blocked_subjects_df[["Subject Code", "Description", "unit", "preRequisites"]])
            else:
                st.info("No blocked subjects.")
        else:
            st.warning("No curriculum found for this course.")
    else:
        st.info("Search for a student to begin enrollment.")


#------------------------------------------------------
registration_helper.py: 

import pandas as pd
from rapidfuzz import process, fuzz
import sys
import os
sys.path.append(os.path.abspath(os.path.join(os.path.dirname(__file__), "..")))
from pymongo.collection import Collection
import pandas as pd
from cache_helper import cache_meta
from datetime import datetime
from typing import List
import sys, os
sys.path.append(os.path.dirname(os.path.dirname(__file__)))
from bson.objectid import ObjectId
from pymongo import MongoClient

# MongoDB Connection
try:
    client = MongoClient("mongodb+srv://aldenroxy:N53wxkFIvbAJjZjc@cluster0.l7fdbmf.mongodb.net")
    db = client['mit261']
    print("‚úÖ Successfully connected to MongoDB!")
except Exception as e:
    print(f"‚ùå Error connecting to MongoDB: {e}")
    sys.exit()



def find_best_match(query=None, course=None, collection=None, limit=200):

    if collection is None:
        raise ValueError("‚ö†Ô∏è You must pass a MongoDB collection (e.g., db.students).")

    filters = []

    # --- Name filter ---
    if query and isinstance(query, str):
        words = query.strip().split()
        regex_pattern = "".join(f"(?=.*{word})" for word in words) + ".*"
        filters.append({"Name": {"$regex": regex_pattern, "$options": "i"}})

    # --- Course filter ---
    if course and isinstance(course, str):
        filters.append({"Course": {"$regex": course, "$options": "i"}})

    # --- Build query ---
    if not filters:
        query_filter = {}
    elif len(filters) == 1:
        query_filter = filters[0]
    else:
        query_filter = {"$and": filters}

    # --- Execute query ---
    projection = {"Name": 1, "Course": 1}
    return list(collection.find(query_filter, projection).limit(limit))

def get_enrolled_students(course=None, semester_id=None):
    """
    Fetches students enrolled in a specified or the latest semester (from enrollments),
    with optional filter for course.
    """
    students_df = pd.DataFrame(columns=['StudentID', 'Name', 'Year Level', 'Total Units'])

    try:
        # Determine semester
        if semester_id is None:
            latest_semester_doc = db['semesters'].find_one(sort=[('_id', -1)])
            if not latest_semester_doc:
                print("‚ö†Ô∏è No semesters found.")
                return students_df
            semester_id_to_use = latest_semester_doc['_id']
        else:
            semester_id_to_use = semester_id

        # Fetch enrollments
        enrollments_cursor = db['enrollments'].find({
            'semesterId': semester_id_to_use,
            'status': 'Enrolled'
        })
        enrollment_docs = list(enrollments_cursor)

        if not enrollment_docs:
            print(f"‚ö†Ô∏è No students found enrolled in semester ID {semester_id_to_use}.")
            return students_df

        students_data = []

        for enrollment in enrollment_docs:
            student_id = enrollment['studentId']
            student_doc = db['students'].find_one({'_id': student_id})
            if not student_doc:
                continue

            # Total units
            total_units = sum(subj.get("Units", 0) for subj in enrollment.get("subjects", []))

            # Apply course filter
            if course and student_doc.get("Course") != course:
                continue

            students_data.append({
                'StudentID': student_id,
                'Name': student_doc.get('Name'),
                'Year Level': student_doc.get('YearLevel'),
                'Total Units': total_units
            })

        if students_data:
            students_df = pd.DataFrame(students_data)

    except Exception as e:
        print(f"‚ùå An error occurred: {e}")

    return students_df

def approve_enrollee(student_id: str, semester_id: int, subject_codes: List[str], approved_by_user: dict):
    """
    Approves a pending enrollment, moves status to 'Enrolled',
    and creates a single grade entry (with arrays) for the semester.
    """
    enrollment = db.enrollments.find_one({"studentId": student_id, "semesterId": semester_id})

    if not enrollment or enrollment.get("status") != "Pending":
        print(f"‚ùå No pending enrollment found for student {student_id} in semester {semester_id}.")
        return None

    # ‚úÖ Mark enrollment as Enrolled
    db.enrollments.update_one(
        {"_id": enrollment["_id"]},
        {
            "$set": {
                "status": "Enrolled",
                "approvedBy": {
                    "id": approved_by_user["_id"],
                    "fullName": approved_by_user["fullName"]
                },
                "approvedAt": datetime.utcnow(),
            }
        }
    )

    # ‚úÖ Prepare grade document
    subjects = enrollment.get("subjects", [])
    subject_codes_list = [subj["subjectCode"] for subj in subjects]
    grades_list = [0] * len(subjects)
    teachers_list = [""] * len(subjects)
    status_list = [""] * len(subjects)

    grade_doc = {
        "StudentID": student_id,
        "SubjectCodes": subject_codes_list,
        "Grades": grades_list,
        "Teachers": teachers_list,
        "SemesterID": semester_id,
        "Status": status_list
    }

    # ‚úÖ Auto-increment `_id` for grades
    last_grade = db.grades.find_one(sort=[("_id", -1)])
    next_id = (last_grade["_id"] + 1) if last_grade else 1
    grade_doc["_id"] = next_id

    # ‚úÖ Insert single grade entry
    db.grades.insert_one(grade_doc)

    print(f"‚úÖ Enrollment approved and grade record created for {len(subjects)} subjects.")
    return enrollment["_id"]

def add_pending_enrollee(student_id, semester_id, subject_codes=None, registered_by_user=None):
    """
    Adds a new student enrollment with Pending status for approval.

    Args:
        student_id (str): ID of the student.
        semester_id (int/str): ID of the semester.
        subject_codes (list, optional): List of subject IDs to pre-assign (default: None).
        registered_by_user (dict, optional): User who registered (e.g., {"_id": 1, "fullName": "Registrar"}).
    """
    try:
        # Fetch semester details
        semester = db.semesters.find_one({"_id": semester_id})
        if not semester:
            raise ValueError(f"Semester with ID {semester_id} not found.")

        subjects = []
        if subject_codes:
            for code in subject_codes:
                subj = db.subjects.find_one({"_id": code})
                if subj:
                    subjects.append({
                        "subjectCode": subj["_id"],
                        "description": subj["Description"],
                        "Units": subj["Units"],
                        "teacher": subj["Teacher"],
                        "status": "Pending"   # Mark subject as pending
                    })

        enrollment_doc = {
            "studentId": student_id,
            "semesterId": semester_id,
            "schoolYear": semester["SchoolYear"],
            "status": "Pending",  # Overall enrollment status
            "registrationDate": datetime.utcnow(),
            "subjects": subjects,
            "registeredBy": {
                "userId": registered_by_user["_id"] if registered_by_user else None,
                "name": registered_by_user["fullName"] if registered_by_user else None
            }
        }

        result = db.enrollments.insert_one(enrollment_doc)
        print(f"‚úÖ Pending enrollment added with ID {result.inserted_id}")
        return result.inserted_id

    except Exception as e:
        print(f"‚ùå Error adding pending enrollee: {e}")
        return None

def discard_pending_enrollee(student_id, semester_id, discarded_by_user=None, reason=None):
    """
    Discards a pending enrollment request.

    Args:
        student_id (str): ID of the student.
        semester_id (int/str): ID of the semester.
        discarded_by_user (dict, optional): User who discarded (e.g., {"_id": 1, "fullName": "Registrar"}).
        reason (str, optional): Reason for discarding.
    """
    try:
        result = db.enrollments.update_one(
            {
                "studentId": student_id,
                "semesterId": semester_id,
                "status": "Pending"   # Only discard if still pending
            },
            {
                "$set": {
                    "status": "Discarded",
                    "discardedDate": datetime.utcnow(),
                    "discardedBy": {
                        "userId": discarded_by_user["_id"] if discarded_by_user else None,
                        "name": discarded_by_user["fullName"] if discarded_by_user else None
                    },
                    "discardReason": reason
                }
            }
        )

        if result.modified_count > 0:
            print(f"‚úÖ Pending enrollment for student {student_id} discarded.")
            return True
        else:
            print(f"‚ö†Ô∏è No pending enrollment found for student {student_id} in semester {semester_id}.")
            return False

    except Exception as e:
        print(f"‚ùå Error discarding pending enrollee: {e}")
        return False

def get_pending_enrollees(semester_id=None, course=None):
    """
    Fetch students with pending enrollment status for review.
    """
    students_df = pd.DataFrame(columns=['StudentID', 'Name', 'Year Level', 'Course', 'Requested Units'])

    try:
        query = {"status": "Pending"}
        if semester_id:
            query["semesterId"] = semester_id

        pending_docs = list(db.enrollments.find(query))
        if not pending_docs:
            print("‚ö†Ô∏è No pending enrollees found.")
            return students_df

        students_data = []
        for enrollment in pending_docs:
            
            student_doc = db.students.find_one({"_id": enrollment["studentId"]})
            print('data:',student_doc)
            if not student_doc:
                print('skip student_doc')
                continue
            # Apply course filter
            
            if course and student_doc.get("Course") != course:
                print('skip course')
                continue

            requested_units = sum(subj.get("Units", 0) for subj in enrollment.get("subjects", []))
            

            students_data.append({
                "StudentID": enrollment["studentId"],
                "Name": student_doc.get("Name"),
                "Year Level": student_doc.get("YearLevel"),
                "Course": student_doc.get("Course"),
                "Requested Units": requested_units
            })

        if students_data:
            students_df = pd.DataFrame(students_data)

    except Exception as e:
        print(f"‚ùå Error fetching pending enrollees: {e}")

    return students_df


def get_discarded_enrollees(semester_id=None):
    """
    Fetch students whose enrollment requests were discarded.
    """
    try:
        query = {"status": "Discarded"}
        if semester_id:
            query["semesterId"] = semester_id

        discarded_docs = list(db.enrollments.find(query))
        return pd.DataFrame(discarded_docs) if discarded_docs else pd.DataFrame()

    except Exception as e:
        print(f"‚ùå Error fetching discarded enrollees: {e}")
        return pd.DataFrame()

def update_enrollment(student_id, semester_id, add_subjects=None, drop_subjects=None, updated_by_user=None):
    """
    Update an enrollment (add/drop subjects) and sync grades collection.
    Prevents duplicate subject additions.
    """
    try:
        enrollment = db.enrollments.find_one(
            {"studentId": student_id, "semesterId": semester_id, "status": "Enrolled"}
        )
        if not enrollment:
            print(f"‚ö†Ô∏è No active enrollment found for student {student_id} in semester {semester_id}.")
            return False

        subjects = enrollment.get("subjects", [])

        # === 1. DROP subjects from enrollment ===
        if drop_subjects:
            subjects = [s for s in subjects if s["subjectCode"] not in drop_subjects]

        # === 2. ADD subjects to enrollment (skip duplicates) ===
        existing_codes = {s["subjectCode"] for s in subjects}  # set for fast lookup
        if add_subjects:
            for code in add_subjects:
                if code in existing_codes:
                    print(f"‚ö†Ô∏è Subject {code} already exists in enrollment, skipping.")
                    continue
                subj = db.subjects.find_one({"_id": code})
                if subj:
                    subjects.append({
                        "subjectCode": subj["_id"],
                        "description": subj["Description"],
                        "Units": subj["Units"],
                        "teacher": subj["Teacher"],
                        "status": "Enrolled"
                    })
                    existing_codes.add(code)

        # === 3. Update enrollment document ===
        result = db.enrollments.update_one(
            {"_id": enrollment["_id"]},
            {
                "$set": {
                    "subjects": subjects,
                    "lastUpdated": datetime.utcnow(),
                    "updatedBy": {
                        "userId": updated_by_user["_id"] if updated_by_user else None,
                        "name": updated_by_user["fullName"] if updated_by_user else None
                    }
                }
            }
        )

        # === 4. Sync grades document ===
        grade_doc = db.grades.find_one({"StudentID": student_id, "SemesterID": semester_id})
        if grade_doc:
            subject_codes = [s["subjectCode"] for s in subjects]
            grades = [0] * len(subjects)
            teachers = [""] * len(subjects)
            status = [""] * len(subjects)

            db.grades.update_one(
                {"_id": grade_doc["_id"]},
                {"$set": {
                    "SubjectCodes": subject_codes,
                    "Grades": grades,
                    "Teachers": teachers,
                    "Status": status
                }}
            )
            print(f"üìò Grades synced for student {student_id}.")
        else:
            print(f"‚ö†Ô∏è No grades doc found for student {student_id} in semester {semester_id}.")

        if result.modified_count > 0:
            print(f"‚úÖ Enrollment updated for student {student_id}.")
            return True
        else:
            print(f"‚ö†Ô∏è No changes applied to enrollment for student {student_id}.")
            return False

    except Exception as e:
        print(f"‚ùå Error updating enrollment: {e}")
        return False

def is_already_enrolled(student_id, semester_id):
    """
    Check if a student is already enrolled (to prevent duplicates).
    """
    try:
        exists = db.enrollments.find_one({
            "studentId": student_id,
            "semesterId": semester_id,
            "status": {"$in": ["Pending", "Enrolled"]}
        })
        return exists is not None
    except Exception as e:
        print(f"‚ùå Error checking enrollment status: {e}")
        return False

#------------------------

